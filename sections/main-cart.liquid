{% comment %}
  Main Cart Section

  Allows viewing and editing items in the cart
{% endcomment %}

<cart-items class="section-cart">
  <div class="page-width">
    <h1 class="cart__title">{{ 'templates.cart.title' | t }}</h1>

    <div class="cart__container">
      {% if cart.item_count > 0 %}
        <form action="{{ routes.cart_url }}" class="cart__form" method="post" id="cart">
          <div class="cart__items">
            <!-- Cart headers - Only visible on desktop -->
            <div class="cart__headers hide-mobile">
              <div class="cart-header cart-header--product">Item</div>
              <div class="cart-header cart-header--price">Price</div>
              <div class="cart-header cart-header--quantity">Quantity</div>
              <div class="cart-header cart-header--total">Subtotal</div>
              <div class="cart-header cart-header--remove"></div>
            </div>

            <!-- Cart items list -->
            <div class="cart__inner">
              {%- for item in cart.items -%}
                <div class="cart-item" id="CartItem-{{ item.key }}">
                  <div class="cart-item__media">
                    <a href="{{ item.url }}">
                      <img
                        src="{{ item.image | image_url: width: 250 }}"
                        alt="{{ item.image.alt | escape }}"
                        loading="lazy"
                        width="125"
                        height="125"
                        class="cart-item__image"
                      >
                    </a>
                  </div>

                  <div class="cart-item__details">
                    <div class="cart-item__name">
                      <a href="{{ item.url }}">{{ item.product.title }}</a>
                    </div>

                    {%- if section.settings.show_vendor and item.product.vendor != blank -%}
                      <div class="cart-item__vendor">{{ item.product.vendor }}</div>
                    {%- endif -%}

                    <!-- Item variant information -->
                    {%- if item.product.has_only_default_variant == false or item.properties.size != 0 -%}
                      <dl class="cart-item__options">
                        {%- if item.product.has_only_default_variant == false -%}
                          {%- for option in item.options_with_values -%}
                            <div class="cart-item__option">
                              <dt>{{ option.name }}: </dt>
                              <dd>{{ option.value }}</dd>
                            </div>
                          {%- endfor -%}
                        {%- endif -%}

                        <!-- Line item properties -->
                        {%- for property in item.properties -%}
                          {%- assign property_first_char = property.first | slice: 0 -%}
                          {%- if property.last != blank and property_first_char != '_' -%}
                            <div class="cart-item__option">
                              <dt>{{ property.first }}: </dt>
                              <dd>
                                {%- if property.last contains '/uploads/' -%}
                                  <a href="{{ property.last }}">{{ property.last | split: '/' | last }}</a>
                                {%- else -%}
                                  {{ property.last }}
                                {%- endif -%}
                              </dd>
                            </div>
                          {%- endif -%}
                        {%- endfor -%}
                      </dl>
                    {%- endif -%}

                    <!-- Mobile price display -->
                    <div class="cart-item__price-container mobile-only">
                      {%- if item.original_price != item.final_price -%}
                        <dl class="cart-item__price">
                          <dt>
                            <span class="visually-hidden">Regular price</span>
                          </dt>
                          <dd class="cart-item__old-price">
                            <s>{{ item.original_price | money }}</s>
                          </dd>
                          <dt>
                            <span class="visually-hidden">Sale price</span>
                          </dt>
                          <dd class="cart-item__final-price">
                            {{ item.final_price | money }}
                          </dd>
                        </dl>
                      {%- else -%}
                        <div class="cart-item__price">
                          {{ item.original_price | money }}
                        </div>
                      {%- endif -%}
                    </div>
                  </div>

                  <!-- Desktop price display -->
                  <div class="cart-item__price-wrapper hide-mobile">
                    {%- if item.original_price != item.final_price -%}
                      <dl class="cart-item__price">
                        <dt>
                          <span class="visually-hidden">Regular price</span>
                        </dt>
                        <dd class="cart-item__old-price">
                          <s>{{ item.original_price | money }}</s>
                        </dd>
                        <dt>
                          <span class="visually-hidden">Sale price</span>
                        </dt>
                        <dd class="cart-item__final-price">
                          {{ item.final_price | money }}
                        </dd>
                      </dl>
                    {%- else -%}
                      <div class="cart-item__price">
                        {{ item.original_price | money }}
                      </div>
                    {%- endif -%}
                  </div>

                  <!-- Quantity selector -->
                  <div class="cart-item__quantity-wrapper">
                    <div class="quantity-selector js-qty">
                      <button
                        type="button"
                        class="quantity-btn js-qty__dec"
                        aria-label="Decrease quantity for {{ item.product.title | escape }}"
                        name="minus"
                        {% if item.quantity == 1 %}disabled{% endif %}
                      >
                        {% render 'icon-minus' %}
                      </button>
                      <input
                        type="number"
                        name="updates[]"
                        value="{{ item.quantity }}"
                        min="0"
                        aria-label="Quantity for {{ item.product.title | escape }}"
                        data-index="{{ forloop.index }}"
                        id="Quantity-{{ item.key }}"
                        class="quantity-input js-qty__input"
                        data-quantity-update
                        data-line-id="{{ forloop.index }}"
                      >
                      <button
                        type="button"
                        class="quantity-btn js-qty__inc"
                        aria-label="Increase quantity for {{ item.product.title | escape }}"
                        name="plus"
                      >
                        {% render 'icon-plus' %}
                      </button>
                    </div>
                  </div>

                  <!-- Subtotal display -->
                  <div class="cart-item__subtotal-wrapper hide-mobile">
                    <div class="cart-item__subtotal">
                      {%- if item.original_line_price != item.final_line_price -%}
                        <dl>
                          <dt>
                            <span class="visually-hidden">Regular price</span>
                          </dt>
                          <dd class="cart-item__old-price">
                            <s>{{ item.original_line_price | money }}</s>
                          </dd>
                          <dt>
                            <span class="visually-hidden">Sale price</span>
                          </dt>
                          <dd class="cart-item__final-price">
                            {{ item.final_line_price | money }}
                          </dd>
                        </dl>
                      {%- else -%}
                        <div>
                          {{ item.original_line_price | money }}
                        </div>
                      {%- endif -%}
                    </div>
                  </div>

                  <!-- Remove button -->
                  <div class="cart-item__remove-wrapper">
                    <button
                      type="button"
                      class="cart-item__remove"
                      aria-label="Remove {{ item.product.title | escape }}"
                      data-line-id="{{ forloop.index }}"
                    >
                      {% render 'icon-remove' %}
                    </button>
                  </div>
                </div>
              {%- endfor -%}
            </div>
          </div>

          <!-- Cart note -->
          {%- if section.settings.show_cart_note -%}
            <div class="cart__note-wrapper">
              <label for="CartNote" class="cart__note-label">Add a note to your order</label>
              <textarea id="CartNote" name="note" class="cart__note" placeholder="Add special instructions or delivery notes...">{{ cart.note }}</textarea>
            </div>
          {%- endif -%}
        </form>

        <!-- Cart totals and checkout -->
        <div class="cart__totals">
          <div class="cart__totals-inner">
            <h2 class="cart__summary-title">Order Summary</h2>

            <div class="cart__summary-row">
              <span>Subtotal</span>
              <span class="cart__subtotal">{{ cart.total_price | money }}</span>
            </div>

            <div class="cart__summary-row">
              <span>Shipping</span>
              <span>Calculated at checkout</span>
            </div>

            {% if cart.total_discounts > 0 %}
              <div class="cart__summary-row">
                <span>Discounts</span>
                <span>-{{ cart.total_discounts | money }}</span>
              </div>
            {% endif %}

            <div class="cart__summary-row cart__summary-row--total">
              <span>Total</span>
              <span class="cart__total">{{ cart.total_price | money }}</span>
            </div>

            <div class="cart__taxes">
              {%- if cart.taxes_included -%}
                Tax included
              {%- endif -%}
              Shipping calculated at checkout
            </div>

            <!-- Checkout buttons -->
            <div class="cart__checkout-buttons">
              <a href="{{ routes.checkout_url }}" class="btn checkout-btn">
                {% render 'icon-checkout' %} Checkout
              </a>

              {%- if section.settings.enable_quick_checkout -%}
                {{ form | payment_button }}
              {%- endif -%}
            </div>

            <!-- Additional checkout buttons -->
            {%- if additional_checkout_buttons -%}
              <div class="cart__additional-checkout">
                {{ content_for_additional_checkout_buttons }}
              </div>
            {%- endif -%}
          </div>
        </div>
      {% else %}
        <!-- Empty cart state -->
        <div class="cart__empty">
          <h2 class="cart__empty-title">Your cart is empty</h2>
          <p class="cart__empty-text">You haven't added any items to your cart yet.</p>
          <a href="{{ routes.collections_url }}" class="btn btn--secondary cart__empty-button">
            Continue shopping
          </a>
        </div>
      {% endif %}
    </div>
  </div>
</cart-items>

{% schema %}
{
  "name": "Cart",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show product vendor",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_cart_note",
      "label": "Enable order notes",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_quick_checkout",
      "label": "Enable quick checkout buttons",
      "info": "Display quick checkout buttons like Shop Pay, Apple Pay, etc.",
      "default": true
    }
  ]
}
{% endschema %}

<style>
.section-cart {
  padding: 2rem 0 5rem;
}

.cart__title {
  font-size: 2rem;
  margin-bottom: 2rem;
  text-align: center;
}

.cart__container {
  margin: 0 auto;
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

/* Cart headers */
.cart__headers {
  display: grid;
  grid-template-columns: 3fr 1fr 1fr 1fr auto;
  padding: 1rem 0;
  border-bottom: 1px solid var(--color-border);
  font-weight: 600;
}

.cart-header {
  padding: 0 1rem;
}

.cart-header--product {
  text-align: left;
}

.cart-header--price,
.cart-header--quantity,
.cart-header--total {
  text-align: center;
}

/* Cart items list */
.cart__inner {
  display: flex;
  flex-direction: column;
}

.cart-item {
  display: grid;
  grid-template-columns: 3fr 1fr 1fr 1fr auto;
  padding: 1.5rem 0;
  border-bottom: 1px solid var(--color-border);
  align-items: center;
}

.cart-item__media {
  padding: 0 1rem;
  grid-column: 1 / 2;
}

.cart-item__image {
  width: 100px;
  height: auto;
  object-fit: contain;
}

.cart-item__details {
  padding-right: 1rem;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.cart-item__name {
  font-weight: 600;
}

.cart-item__name a {
  color: var(--color-headings);
}

.cart-item__vendor {
  color: var(--color-text-light);
  font-size: 0.9rem;
}

.cart-item__options {
  margin: 0;
  font-size: 0.85rem;
}

.cart-item__option {
  display: flex;
  gap: 0.25rem;
  margin-bottom: 0.25rem;
}

.cart-item__option dt {
  color: var(--color-text-light);
}

.cart-item__option dd {
  margin: 0;
}

.cart-item__price-wrapper,
.cart-item__subtotal-wrapper {
  text-align: center;
}

.cart-item__price,
.cart-item__subtotal {
  display: flex;
  flex-direction: column;
}

.cart-item__old-price {
  color: var(--color-text-light);
  font-size: 0.85rem;
}

.cart-item__final-price {
  color: var(--color-primary);
  font-weight: 600;
}

.cart-item__quantity-wrapper {
  display: flex;
  justify-content: center;
}

.cart-item__remove-wrapper {
  padding: 0 1rem;
  display: flex;
  justify-content: center;
}

.cart-item__remove {
  background: none;
  border: none;
  color: var(--color-text-light);
  cursor: pointer;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.cart-item__remove:hover {
  background: #FEE2E2;
  color: #DC2626;
}

/* Cart note */
.cart__note-wrapper {
  margin-top: 2rem;
}

.cart__note-label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
}

.cart__note {
  width: 100%;
  min-height: 100px;
  padding: 0.75rem;
  border: 1px solid var(--color-border);
  border-radius: var(--radius-small);
  resize: vertical;
}

/* Cart totals */
.cart__totals {
  margin-top: 2rem;
  max-width: 400px;
  width: 100%;
  align-self: flex-end;
}

.cart__totals-inner {
  background: var(--color-background-light);
  border-radius: var(--radius-base);
  padding: 1.5rem;
}

.cart__summary-title {
  font-size: 1.25rem;
  margin-bottom: 1.5rem;
  text-align: center;
}

.cart__summary-row {
  display: flex;
  justify-content: space-between;
  margin-bottom: 0.75rem;
  padding-bottom: 0.75rem;
  border-bottom: 1px solid var(--color-border);
}

.cart__summary-row--total {
  font-weight: 700;
  font-size: 1.1rem;
  margin-top: 1rem;
}

.cart__taxes {
  margin-bottom: 1.5rem;
  font-size: 0.85rem;
  color: var(--color-text-light);
  text-align: center;
}

/* Checkout buttons */
.cart__checkout-buttons {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 1rem;
}

.checkout-btn {
  width: 100%;
  padding: 0.875rem;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  font-weight: 700;
}

.cart__additional-checkout {
  margin-top: 1rem;
}

/* Empty cart */
.cart__empty {
  text-align: center;
  padding: 3rem 0;
  max-width: 500px;
  margin: 0 auto;
}

.cart__empty-title {
  font-size: 1.5rem;
  margin-bottom: 1rem;
}

.cart__empty-text {
  margin-bottom: 2rem;
}

.cart__empty-button {
  margin-top: 1rem;
}

/* Utility classes */
.hide-mobile {
  display: none;
}

.mobile-only {
  display: block;
}

/* Responsive layout */
@media screen and (min-width: 768px) {
  .cart__container {
    flex-direction: row;
    align-items: flex-start;
  }

  .cart__form {
    flex: 1;
  }

  .cart__totals {
    margin-top: 0;
  }

  .hide-mobile {
    display: block;
  }

  .mobile-only {
    display: none;
  }
}

@media screen and (max-width: 767px) {
  .cart-item {
    grid-template-columns: auto 1fr auto;
    grid-template-areas:
      "image details remove"
      "image quantity remove";
    gap: 1rem;
    padding: 1rem 0;
  }

  .cart-item__media {
    grid-area: image;
  }

  .cart-item__details {
    grid-area: details;
  }

  .cart-item__quantity-wrapper {
    grid-area: quantity;
    justify-content: flex-start;
  }

  .cart-item__remove-wrapper {
    grid-area: remove;
    padding: 0;
  }

  .cart-item__image {
    width: 80px;
  }
}
</style>

<script>
  class CartItems extends HTMLElement {
    constructor() {
      super();

      // Initialize event handlers once the component is connected
      this.addEventListener('input', this.onQuantityChange);
      this.addEventListener('click', this.onButtonClick);

      // Debounced cart update
      this.debouncedOnChange = this.debounce(this.onChange.bind(this), 300);
    }

    // Handle quantity changes
    onQuantityChange(event) {
      if (event.target.dataset.quantityUpdate) {
        this.debouncedOnChange(event);
      }
    }

    // Handle button clicks
    onButtonClick(event) {
      // Quantity buttons
      if (event.target.closest('.js-qty__inc')) {
        const input = event.target.closest('.js-qty').querySelector('.js-qty__input');
        input.value = parseInt(input.value) + 1;
        input.dispatchEvent(new Event('input'));
      } else if (event.target.closest('.js-qty__dec')) {
        const input = event.target.closest('.js-qty').querySelector('.js-qty__input');
        if (parseInt(input.value) > 1) {
          input.value = parseInt(input.value) - 1;
          input.dispatchEvent(new Event('input'));
        }
      }

      // Remove item button
      if (event.target.closest('.cart-item__remove')) {
        const lineId = event.target.closest('.cart-item__remove').dataset.lineId;
        this.updateQuantity(lineId, 0);
      }
    }

    // Debounce helper function
    debounce(fn, wait) {
      let timeout;
      return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => fn.apply(this, args), wait);
      };
    }

    // Handle quantity changes with debouncing
    onChange(event) {
      const lineId = event.target.dataset.lineId;
      const quantity = parseInt(event.target.value);

      if (quantity >= 0) {
        this.updateQuantity(lineId, quantity);
      }
    }

    // Update cart quantity via fetch
    updateQuantity(lineId, quantity) {
      // Show loading state on the cart
      this.classList.add('cart--loading');

      // Use fetch API to update cart
      const body = JSON.stringify({
        updates: {
          [lineId]: quantity
        },
        sections: ['main-cart']
      });

      fetch('/cart/update.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body
      })
      .then(response => response.json())
      .then(data => {
        // If item was removed or cart is empty, reload the page
        if (quantity === 0 || data.item_count === 0) {
          window.location.reload();
        } else {
          // Update cart count in the header
          const cartCountElements = document.querySelectorAll('[data-cart-count]');
          if (cartCountElements.length) {
            cartCountElements.forEach(el => {
              el.textContent = data.item_count;
            });
          }

          // Update the subtotal amount
          const subtotalElements = document.querySelectorAll('.cart__subtotal, .cart__total');
          if (subtotalElements.length) {
            const formatter = new Intl.NumberFormat('en-US', {
              style: 'currency',
              currency: data.currency
            });

            subtotalElements.forEach(el => {
              el.textContent = formatter.format(data.total_price / 100);
            });
          }
        }
      })
      .catch(error => {
        console.error('Error updating cart:', error);
      })
      .finally(() => {
        this.classList.remove('cart--loading');
      });
    }
  }

  customElements.define('cart-items', CartItems);
</script>