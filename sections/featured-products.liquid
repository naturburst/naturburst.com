<div class="featured-products section">
  <div class="section-header">
    <h2>{{ section.settings.title | escape }}</h2>
  </div>

  <div class="featured-products-container">
    <div class="product-slider">
      <div class="product-slider__wrapper">
        {% assign collection = collections[section.settings.collection] %}
        <div class="product-slider__items" data-products-slider>
          {% for product in collection.products limit: section.settings.products_to_show %}
            <div class="product-slide">
              {% render 'product-card',
                product: product,
                show_rating: section.settings.show_rating,
                show_quick_add: section.settings.enable_quick_add
              %}
            </div>
          {% else %}
            {%- for i in (1..section.settings.products_to_show) -%}
              <div class="product-slide">
                {% render 'product-card-placeholder' %}
              </div>
            {%- endfor -%}
          {% endfor %}
        </div>

        <button type="button" class="slider-button slider-button--prev" aria-label="Previous slide">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="15 18 9 12 15 6"></polyline>
          </svg>
        </button>

        <button type="button" class="slider-button slider-button--next" aria-label="Next slide">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="9 18 15 12 9 6"></polyline>
          </svg>
        </button>
      </div>
    </div>

    {% if section.settings.view_all_text != blank and section.settings.view_all_url != blank %}
      <div class="view-all-container">
        <a href="{{ section.settings.view_all_url }}" class="view-all-btn">
          {{ section.settings.view_all_text }}
          {% render 'icon-arrow-right' %}
        </a>
      </div>
    {% endif %}
  </div>
</div>

{% schema %}
{
  "name": "Featured Products",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "EXPLORE OUR PRODUCTS"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 12,
      "step": 1,
      "default": 4,
      "label": "Products to show"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "label": "Show product rating",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_quick_add",
      "label": "Enable quick add",
      "default": true
    },
    {
      "type": "text",
      "id": "view_all_text",
      "label": "View all text",
      "default": "VIEW ALL PRODUCTS"
    },
    {
      "type": "url",
      "id": "view_all_url",
      "label": "View all URL"
    }
  ],
  "presets": [
    {
      "name": "Featured Products",
      "category": "Products",
      "settings": {
        "collection": "featured-products",
        "products_to_show": 4
      }
    }
  ]
}
{% endschema %}

<style>
.featured-products {
  padding: 3rem 0;
  background: white;
  width: 100%;
  max-width: 100%;
}

/* Product slider container */
.product-slider {
  position: relative;
  width: 100%;
  margin: 0 auto;
}

/* Wrapper for slider items and navigation */
.product-slider__wrapper {
  position: relative;
  display: flex;
  flex-direction: column;
  width: 100%;
}

/* Container for product items */
.product-slider__items {
  display: flex;
  overflow-x: auto;
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch;
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE and Edge */
  padding: 1rem 0;
  width: 100%;
}

.product-slider__items::-webkit-scrollbar {
  display: none; /* Chrome, Safari, Opera */
}

.product-slide {
  flex: 0 0 auto;
  width: 280px;
  margin-right: 1.5rem;
}

/* Navigation buttons */
.slider-button {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  z-index: 1;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: white;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
}

.slider-button:hover {
  background: var(--color-primary);
  color: white;
}

.slider-button--prev {
  left: 10px;
}

.slider-button--next {
  right: 10px;
}

.view-all-container {
  text-align: center;
  margin-top: 2rem;
}

.view-all-btn {
  display: inline-flex;
  align-items: center;
  background: var(--color-primary);
  color: white;
  font-weight: 600;
  padding: 0.8rem 1.5rem;
  border-radius: 5px;
  transition: all 0.3s ease;
}

.view-all-btn .icon {
  margin-left: 0.5rem;
  transition: transform 0.3s ease;
}

.view-all-btn:hover {
  background: var(--color-primary-darker);
}

.view-all-btn:hover .icon {
  transform: translateX(3px);
}

/* Responsive adjustments */
@media (min-width: 768px) {
  .product-slider {
    padding: 0 50px;
    max-width: 100%;
  }

  .product-slider__items {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
    justify-content: space-between;
    padding: 1rem 0;
    overflow-x: visible;
  }

  .product-slide {
    width: 100%;
    margin-right: 0;
  }
}

@media (min-width: 1200px) {
  .product-slider {
    padding: 0 60px;
  }

  .product-slider__items {
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }
}

@media (max-width: 767px) {
  .product-slider {
    padding: 0;
  }

  .product-slider__items {
    padding: 1rem 1rem;
    justify-content: flex-start;
  }

  .product-slide {
    width: 85vw;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize all product sliders on the page
  const sliders = document.querySelectorAll('[data-products-slider]');

  sliders.forEach(slider => {
    const prevBtn = slider.parentElement.querySelector('.slider-button--prev');
    const nextBtn = slider.parentElement.querySelector('.slider-button--next');

    if (!prevBtn || !nextBtn) return;

    // Calculate slide width including margins
    const getSlideWidth = () => {
      const slides = slider.querySelectorAll('.product-slide');
      if (slides.length > 0) {
        const slideWidth = slides[0].getBoundingClientRect().width;
        const computedStyle = window.getComputedStyle(slides[0]);
        const marginRight = parseFloat(computedStyle.marginRight);
        return slideWidth + marginRight;
      }
      return 280 + 24; // Fallback: default slide width + margin
    };

    // Only enable scroll behavior on mobile
    const shouldScroll = () => window.innerWidth < 768;

    // Previous button click handler
    prevBtn.addEventListener('click', () => {
      if (!shouldScroll()) return;

      const itemWidth = getSlideWidth();
      const currentIndex = Math.round(slider.scrollLeft / itemWidth);
      const slideCount = slider.querySelectorAll('.product-slide').length;

      // Handle beginning of slider (loop to end)
      if (currentIndex <= 0) {
        // Temporarily disable smooth scrolling for instant jump
        slider.style.scrollBehavior = 'auto';
        slider.scrollLeft = itemWidth * (slideCount - 1);

        // Force reflow before re-enabling smooth scrolling
        void slider.offsetWidth;
        slider.style.scrollBehavior = 'smooth';
      } else {
        // Normal scroll to previous slide
        slider.scrollTo({ left: itemWidth * (currentIndex - 1), behavior: 'smooth' });
      }
    });

    // Next button click handler
    nextBtn.addEventListener('click', () => {
      if (!shouldScroll()) return;

      const itemWidth = getSlideWidth();
      const slideCount = slider.querySelectorAll('.product-slide').length;
      const currentIndex = Math.round(slider.scrollLeft / itemWidth);

      // Handle end of slider (loop to beginning)
      if (currentIndex >= slideCount - 1) {
        // Temporarily disable smooth scrolling for instant jump
        slider.style.scrollBehavior = 'auto';
        slider.scrollLeft = 0;

        // Force reflow before re-enabling smooth scrolling
        void slider.offsetWidth;
        slider.style.scrollBehavior = 'smooth';
      } else {
        // Normal scroll to next slide
        slider.scrollTo({ left: itemWidth * (currentIndex + 1), behavior: 'smooth' });
      }
    });

    // Update button visibility based on viewport width
    const updateNavVisibility = () => {
      const shouldShowNav = shouldScroll();
      prevBtn.style.display = shouldShowNav ? 'flex' : 'none';
      nextBtn.style.display = shouldShowNav ? 'flex' : 'none';
    };

    // Run on load and resize
    updateNavVisibility();
    window.addEventListener('resize', updateNavVisibility);
  });
});
</script>