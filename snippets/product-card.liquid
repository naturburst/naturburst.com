{% comment %}
  Product Card Component - Optimized for mobile

  Parameters:
  - product: (required) The product object to display
  - show_rating: (optional) Boolean for whether to show the product rating
  - show_quick_add: (optional) Boolean for whether to include quick add button
  - show_secondary_image: (optional) Boolean for whether to show alternate image on hover
{% endcomment %}

{%- if product == blank -%}
  {%- render 'product-card-placeholder' -%}
{%- else -%}

{%- liquid
  assign product_url = product.url

  # Select the first available variant or fallback to the default variant
  assign current_variant = product.selected_or_first_available_variant

  # Get main featured image
  assign featured_image = product.featured_image | default: current_variant.featured_image

  # Get secondary image for hover effect (if enabled)
  assign secondary_image = false
  if show_secondary_image and product.images.size > 1
    for image in product.images
      if image.id != featured_image.id
        assign secondary_image = image
        break
      endif
    endfor
  endif

  # Get product type for styling
  assign product_type = product.type | handle

  # Determine if the product has multiple variants for variant selector
  assign has_multiple_variants = false
  if product.has_only_default_variant == false and product.variants.size > 1
    assign has_multiple_variants = true
  endif

  # Determine background color based on product type
  assign color_class = 'default'
  case product_type
    when 'custard-apple'
      assign color_class = 'custard-apple'
    when 'jackfruit'
      assign color_class = 'jackfruit'
    when 'jamun'
      assign color_class = 'jamun'
    else
      assign color_class = 'default'
  endcase

  # Pricing variables
  assign compare_at_price = current_variant.compare_at_price
  assign price = current_variant.price
  assign product_available = current_variant.available

  # Determine product weight for display
  assign weight = ''
  if current_variant.weight_unit and current_variant.weight > 0
    assign weight = current_variant.weight | append: current_variant.weight_unit
  elsif product.metafields.custom.weight != blank
    assign weight = product.metafields.custom.weight
  else
    assign weight = '20g'
  endif
-%}

<div class="product-card" data-product-card data-product-handle="{{ product.handle }}">
  <div class="product-card__container">
    <a href="{{ product_url }}" class="product-card__image-container {{ color_class }}">
      <div class="product-card__image-wrapper">
        <img
          src="{{ featured_image | img_url: '400x' }}"
          srcset="
            {{ featured_image | img_url: '200x' }} 200w,
            {{ featured_image | img_url: '300x' }} 300w,
            {{ featured_image | img_url: '400x' }} 400w,
            {{ featured_image | img_url: '500x' }} 500w,
            {{ featured_image | img_url: '600x' }} 600w
          "
          sizes="(min-width: 1200px) 300px, (min-width: 768px) 250px, 85vw"
          alt="{{ featured_image.alt | escape }}"
          width="{{ featured_image.width }}"
          height="{{ featured_image.height }}"
          loading="lazy"
          class="product-card__image"
        >

        {% if secondary_image %}
          <img
            src="{{ secondary_image | img_url: '400x' }}"
            srcset="
              {{ secondary_image | img_url: '200x' }} 200w,
              {{ secondary_image | img_url: '300x' }} 300w,
              {{ secondary_image | img_url: '400x' }} 400w,
              {{ secondary_image | img_url: '500x' }} 500w,
              {{ secondary_image | img_url: '600x' }} 600w
            "
            sizes="(min-width: 1200px) 300px, (min-width: 768px) 250px, 85vw"
            alt="{{ secondary_image.alt | escape }}"
            width="{{ secondary_image.width }}"
            height="{{ secondary_image.height }}"
            loading="lazy"
            class="product-card__image product-card__image--secondary"
          >
        {% endif %}

        {% if product_available == false %}
          <span class="product-card__sold-out">Sold out</span>
        {% endif %}
      </div>
    </a>

    <div class="product-card__content">
      <h3 class="product-card__title">
        <a href="{{ product_url }}">{{ product.title }}</a>
      </h3>

      <div class="product-card__meta">
        <div class="product-card__type">{{ product.vendor }}</div>
        <div class="product-card__weight">{{ weight }}</div>
      </div>

      {% if show_rating and product.metafields.reviews.rating %}
        <div class="product-card__rating">
          {%- liquid
            assign rating_decimal = product.metafields.reviews.rating.value | round: 1
            assign rating_value = product.metafields.reviews.rating.value | round
          -%}

          <div class="rating" role="img" aria-label="{{ rating_decimal }} out of 5 stars">
            <span aria-hidden="true" class="rating-star rating-{{ rating_value }}">★★★★★</span>
            <span class="rating-text">{{ rating_decimal }} / 5</span>
          </div>
        </div>
      {% endif %}

      <div class="product-card__price">
        {% if compare_at_price > price %}
          <p class="product-card__price-item product-card__price-item--regular">{{ compare_at_price | money }}</p>
          <p class="product-card__price-item product-card__price-item--sale">{{ price | money }}</p>
        {% else %}
          <p class="product-card__price-item">{{ price | money }}</p>
        {% endif %}
      </div>

      {% if show_quick_add %}
        <product-form class="product-card__form">
          {%- form 'product', product, id: 'QuickAddForm-' | append: product.id, class: 'form', novalidate: 'novalidate', data-type: 'quick-add-form' -%}
            <input type="hidden" name="id" value="{{ current_variant.id }}">

            {% if has_multiple_variants %}
              <a href="{{ product_url }}" class="btn product-card__quick-view-btn">
                View options
              </a>
            {% else %}
              <button
                type="submit"
                name="add"
                {% if product_available == false %} disabled{% endif %}
                class="btn product-card__add-to-cart-btn"
              >
                <span>
                  {%- if product_available -%}
                    Add to cart
                  {%- else -%}
                    Sold out
                  {%- endif -%}
                </span>
                <div class="loading-overlay__spinner hidden">
                  <svg class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                    <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
                  </svg>
                </div>
              </button>
            {% endif %}
          {%- endform -%}
        </product-form>
      {% endif %}
    </div>
  </div>
</div>

{%- endif -%}

<style>
.product-card {
  height: 100%;
}

.product-card__container {
  background: white;
  border-radius: 8px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
  overflow: hidden;
  height: 100%;
  display: flex;
  flex-direction: column;
  text-align: center;
}

.product-card__container:hover {
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  transform: translateY(-5px);
}

.product-card__image-container {
  height: 240px;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem;
  position: relative;
}

.product-card__image-container.custard-apple {
  background: var(--color-custard-apple, #E8F5E9);
}

.product-card__image-container.jackfruit {
  background: var(--color-jackfruit, #FFF8E1);
}

.product-card__image-container.jamun {
  background: var(--color-jamun, #F3E5F5);
}

.product-card__image-container.default {
  background: #E0F7FA;
}

.product-card__image-wrapper {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.product-card__image {
  max-height: 90%;
  max-width: 90%;
  object-fit: contain;
  transition: all 0.3s ease;
}

.product-card__image--secondary {
  position: absolute;
  top: 0;
  left: 0;
  opacity: 0;
}

.product-card__image-container:hover .product-card__image:not(.product-card__image--secondary) {
  opacity: 0;
}

.product-card__image-container:hover .product-card__image--secondary {
  opacity: 1;
}

.product-card__image-container:hover .product-card__image {
  transform: scale(1.08);
}

.product-card__sold-out {
  position: absolute;
  top: 10px;
  right: 10px;
  background: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
}

.product-card__content {
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  background: white;
}

.product-card__title {
  font-size: 1.2rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
  color: var(--color-headings);
  line-height: 1.3;
  font-family: var(--font-heading);
}

.product-card__title a {
  color: inherit;
  text-decoration: none;
}

.product-card__meta {
  display: flex;
  justify-content: space-between;
  margin-bottom: 1rem;
}

.product-card__type {
  font-size: 0.9rem;
  color: var(--color-text-light);
  font-family: var(--font-body);
}

.product-card__weight {
  font-size: 0.9rem;
  color: var(--color-text-light);
  font-weight: 600;
  font-family: var(--font-body);
}

.product-card__rating {
  margin-bottom: 1rem;
}

.rating {
  display: inline-flex;
  align-items: center;
}

.rating-star {
  position: relative;
  color: #DDDDDD; /* Empty star color */
  font-size: 1rem;
  letter-spacing: 2px;
}

.rating-star::before {
  content: attr(class);
  position: absolute;
  top: 0;
  left: 0;
  color: #FFD700; /* Filled star color */
  width: 0;
  overflow: hidden;
  white-space: nowrap;
}

.rating-1::before { width: 20%; }
.rating-2::before { width: 40%; }
.rating-3::before { width: 60%; }
.rating-4::before { width: 80%; }
.rating-5::before { width: 100%; }

.rating-text {
  margin-left: 0.5rem;
  font-size: 0.85rem;
  color: var(--color-text-light);
}

.product-card__price {
  margin-bottom: 1.25rem;
}

.product-card__price-item--regular {
  color: var(--color-text-light);
  text-decoration: line-through;
  font-size: 0.9rem;
  margin-bottom: 0.25rem;
  font-family: var(--font-body);
}

.product-card__price-item--sale {
  color: var(--color-primary);
  font-weight: 700;
  font-size: 1.3rem;
  margin-bottom: 0;
  font-family: var(--font-heading);
}

.product-card__price-item:not(.product-card__price-item--regular):not(.product-card__price-item--sale) {
  color: var(--color-primary);
  font-weight: 700;
  font-size: 1.3rem;
  margin-bottom: 0;
  font-family: var(--font-heading);
}

.product-card__add-to-cart-btn,
.product-card__quick-view-btn {
  width: 100%;
  background: var(--color-primary);
  color: white;
  font-weight: 600;
  margin-top: auto;
  text-align: center;
  padding: 0.8rem;
  border-radius: 5px;
  font-size: 0.9rem;
  font-family: var(--font-heading);
  position: relative;
}

.product-card__add-to-cart-btn:hover,
.product-card__quick-view-btn:hover {
  background: var(--color-primary-darker);
}

.product-card__add-to-cart-btn[disabled] {
  background: var(--color-text-light);
  cursor: not-allowed;
}

.loading-overlay__spinner {
  display: inline-block;
  position: absolute;
  width: 18px;
  height: 18px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.spinner {
  animation: rotate 2s linear infinite;
  animation-play-state: paused;
}

.spinner .path {
  stroke: currentColor;
  stroke-linecap: round;
  animation: dash 1.5s ease-in-out infinite;
}

@keyframes rotate {
  100% {
    transform: rotate(360deg);
  }
}

@keyframes dash {
  0% {
    stroke-dasharray: 1, 150;
    stroke-dashoffset: 0;
  }
  50% {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: -35;
  }
  100% {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: -124;
  }
}

.hidden {
  display: none !important;
}

/* Responsive styles for tablets */
@media (max-width: 991px) {
  .product-card__image-container {
    height: 220px;
  }
}

/* Responsive styles for mobile */
@media (max-width: 767px) {
  .product-card__image-container {
    height: 200px;
  }

  .product-card__title {
    font-size: 1.1rem;
  }

  .product-card__price-item--sale,
  .product-card__price-item:not(.product-card__price-item--regular) {
    font-size: 1.1rem;
  }

  .product-card__content {
    padding: 1.25rem;
  }
}

/* Extra small devices */
@media (max-width: 480px) {
  .product-card__image-container {
    height: 180px;
  }

  .product-card__meta {
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
  }

  .product-card__add-to-cart-btn,
  .product-card__quick-view-btn {
    padding: 0.7rem;
  }
}
</style>

<script>
// Custom element for handling product form interactions with enhanced cart updates
if (!customElements.get('product-form')) {
  customElements.define('product-form', class ProductForm extends HTMLElement {
    constructor() {
      super();
      this.form = this.querySelector('form');
      // Only attach event listener if form exists to prevent null reference errors
      this.form?.addEventListener('submit', this.onSubmitHandler.bind(this));

      // Add touch event handling for mobile devices
      if (this.form && 'ontouchstart' in window) {
        const submitButton = this.form.querySelector('[type="submit"]');
        if (submitButton) {
          submitButton.addEventListener('touchstart', function() {
            this.classList.add('touch-active');
          });
          submitButton.addEventListener('touchend', function() {
            this.classList.remove('touch-active');
          });
        }
      }
    }

    onSubmitHandler(evt) {
      evt.preventDefault();
      const submitButton = this.querySelector('[type="submit"]');
      // Skip processing if button is already in loading state
      if (submitButton.classList.contains('loading') || submitButton.hasAttribute('disabled')) return;

      this.handleErrorMessage();
      this.setLoadingState(submitButton, true);

      // Configure AJAX request for cart addition
      const config = {
        method: 'POST',
        headers: {
          'Accept': 'application/javascript',
          'X-Requested-With': 'XMLHttpRequest'
        }
      };

      const formData = new FormData(this.form);
      // Request cart sections for potential drawer updates
      formData.append('sections', 'cart-icon-bubble,cart-drawer');
      formData.append('sections_url', window.location.pathname);
      config.body = formData;

      // Execute cart addition with error handling
      fetch(`${routes.cart_add_url}`, config)
        .then(response => response.json())
        .then(response => {
          if (response.status) {
            this.handleErrorMessage(response.description);
            return;
          }

          this.updateCartUI();
          this.resetForm();
        })
        .catch(error => {
          console.error(error);
          this.handleErrorMessage('An error occurred. Please try again.');
        })
        .finally(() => {
          this.setLoadingState(submitButton, false);
        });
    }

    // Extracted cart UI update logic for better maintainability
    updateCartUI() {
      // Update cart count across all potential indicators
      fetch('/cart.js')
        .then(res => res.json())
        .then(cart => {
          const cartCountBubbles = document.querySelectorAll('.cart-count');
          cartCountBubbles.forEach(bubble => {
            const cartCount = bubble.querySelector('[data-cart-count]');
            if (cartCount) cartCount.textContent = cart.item_count;
          });

          // Notify other components of cart update using event system
          document.dispatchEvent(new CustomEvent('cart:added', {
            bubbles: true,
            detail: { message: 'Item added to cart' }
          }));
        })
        .catch(error => console.error('Error updating cart UI:', error));
    }

    // Toggle loading state with spinner visibility
    setLoadingState(button, isLoading) {
      button.setAttribute('aria-disabled', isLoading);
      button.classList.toggle('loading', isLoading);
      const spinner = button.querySelector('.loading-overlay__spinner');
      if (spinner) spinner.classList.toggle('hidden', !isLoading);
    }

    handleErrorMessage(errorMessage = false) {
      const errorContainer = this.querySelector('.product-form__error-message-wrapper');
      const errorMessageElement = errorContainer?.querySelector('.product-form__error-message');

      if (!errorContainer || !errorMessageElement) return;

      // Toggle visibility and update content only when there's an actual error
      errorContainer.toggleAttribute('hidden', !errorMessage);
      if (errorMessage) errorMessageElement.textContent = errorMessage;
    }

    resetForm() {
      this.form.reset();
    }
  });
}
</script>